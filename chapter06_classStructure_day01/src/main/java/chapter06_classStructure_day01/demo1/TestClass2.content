Classfile /home/ygh/workspace/javaVirtualMachine/workspace/chapter06_classStructure_day01/src/main/java/chapter06_classStructure_day01/demo1/TestClass.class
  Last modified Jun 16, 2017; size 472 bytes
  MD5 checksum 0c6fb1a9c33f24eb90e3ad7b1cc534a0
  Compiled from "TestClass.java"
public class chapter06_classStructure_day01.demo1.TestClass
  minor version: 0
  major version: 52
  flags: ACC_PUBLIC, ACC_SUPER
Constant pool:
   #1 = Methodref          #4.#18         // java/lang/Object."<init>":()V
   #2 = Class              #19            // java/lang/Exception
   #3 = Class              #20            // chapter06_classStructure_day01/demo1/TestClass
   #4 = Class              #21            // java/lang/Object
   #5 = Utf8               m
   #6 = Utf8               I
   #7 = Utf8               <init>
   #8 = Utf8               ()V
   #9 = Utf8               Code
  #10 = Utf8               LineNumberTable
  #11 = Utf8               inc
  #12 = Utf8               ()I
  #13 = Utf8               StackMapTable
  #14 = Class              #19            // java/lang/Exception
  #15 = Class              #22            // java/lang/Throwable
  #16 = Utf8               SourceFile
  #17 = Utf8               TestClass.java
  #18 = NameAndType        #7:#8          // "<init>":()V
  #19 = Utf8               java/lang/Exception
  #20 = Utf8               chapter06_classStructure_day01/demo1/TestClass
  #21 = Utf8               java/lang/Object
  #22 = Utf8               java/lang/Throwable
{
  public chapter06_classStructure_day01.demo1.TestClass();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 8: 0

  public int inc();
    descriptor: ()I
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=5, args_size=1
         0: iconst_1	//try 中的x=1
         1: istore_1
         2: iload_1	//将x保存到returnValue中，此时x=1
         3: istore_2    
         4: iconst_3	//finaly块中的x=3
         5: istore_1    
         6: iload_2     //将returnValue中的元素放入栈顶，准备ireturn返回
         7: ireturn     //ireturn 操作		
         8: astore_2    //给catch中的Exception e赋值，存放在Slot 2中
         9: iconst_2    //将catch块中x=2
        10: istore_1   
        11: iload_1     //将x保存到returnValue中，此时x=2
        12: istore_3
        13: iconst_3	//finaly块中的x=3
        14: istore_1
        15: iload_3	//将returnValue中的值放入栈顶，准备给ireturn返回
        16: ireturn	//执行ireturn
        17: astore        4 //如果出来了不属于java.lang.Excoption的异常，才会走到这里
        19: iconst_3        //finaly块中的x=3
        20: istore_1
        21: aload         4 //将异常放入栈顶，并抛出
        23: athrow
      Exception table:
         from    to  target type
             0     4     8   Class java/lang/Exception
             0     4    17   any
             8    13    17   any
            17    19    17   any
      LineNumberTable:
        line 14: 0
        line 15: 2
        line 20: 4
        line 15: 6
        line 16: 8
        line 17: 9
        line 18: 11
        line 20: 13
        line 18: 15
        line 20: 17
      StackMapTable: number_of_entries = 2
        frame_type = 72 /* same_locals_1_stack_item */
          stack = [ class java/lang/Exception ]
        frame_type = 72 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
}
SourceFile: "TestClass.java"
