Some Method and Class introduce about dynamic

Class CallSite

    java.lang.Object
        java.lang.invoke.CallSite 

    Direct Known Subclasses:
        ConstantCallSite, MutableCallSite, VolatileCallSite


    public abstract class CallSite
    extends Object

    A CallSite is a holder for a variable MethodHandle, which is called its target. An invokedynamic instruction(指令) 
    linked to a CallSite delegates(委托) all calls to the site's current target. A CallSite may be associated(有关联的)
    with several invokedynamic instructions, or it may be "free floating(自由流动的)", associated with none. 
    In any case, it may be invoked through an associated method handle called its dynamic invoker.

    CallSite is an abstract class which does not allow direct subclassing(子类化) by users. It has three immediate, 
    concrete(实际的) subclasses that may be either instantiated(实例化) or subclassed(子类化).
        If a mutable(可变的) target is not required, an invokedynamic instruction may be permanently bound(活跃) by means of 
        a constant call site.
        If a mutable target(调用者) is required which has volatile variable semantics(修饰), because updates to the target must
        be immediately and reliably(可靠的) witnessed by other threads, a volatile call site may be used.
        Otherwise, if a mutable target is required, a mutable call site may be used. 

    A non-constant call site may be relinked by changing its target. The new target must have the same type as the 
    previous target. Thus, though a call site can be relinked to a series of successive targets, it cannot change its type.

    Here is a sample use of call sites and bootstrap methods which links every dynamic call site to print its arguments:


        static void test() throws Throwable {
            // THE FOLLOWING LINE IS PSEUDOCODE FOR A JVM INSTRUCTION
            InvokeDynamic[#bootstrapDynamic].baz("baz arg", 2, 3.14);
        }
        private static void printArgs(Object... args) {
          System.out.println(java.util.Arrays.deepToString(args));
        }
        private static final MethodHandle printArgs;
        static {
          MethodHandles.Lookup lookup = MethodHandles.lookup();
          Class thisClass = lookup.lookupClass();  // (who am I?)
          printArgs = lookup.findStatic(thisClass,
              "printArgs", MethodType.methodType(void.class, Object[].class));
        }
        private static CallSite bootstrapDynamic(MethodHandles.Lookup caller, String name, MethodType type) {
          // ignore caller and name, but match the type:
          return new ConstantCallSite(printArgs.asType(type));
        }

